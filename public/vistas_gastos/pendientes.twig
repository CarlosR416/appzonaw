{% extends "tabla.twig" %}

{% block js_script %}

<script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
<script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

<script src="{{base_dir}}/../js/React/Botones_CRUD.js" type="text/babel"></script>
<script src="{{base_dir}}/../js/React/Modals.js" type="text/babel"></script>
<script src="{{base_dir}}/../js/React/Forms.js" type="text/babel"></script>


<script type="text/babel">



 

    class ContentModal extends Formdata{
        

        ContentDispatcher(){

            switch(this.props.content){
                case "nuevogasto":
                    return(
                        <Form 
                            onChange2={this.onChange2}
                            changeState={(dataform) => this.changeState(dataform)}
                        />
                    );
                
                  break;

                case "procesargasto":
                    return(
                        <Form2 
                            onChange2={this.onChange2}
                            changeState={(dataform) => this.changeState(dataform)}
                            dataDefault={this.props.dataDefault}
                        />
                    );
                
                  break;

                case "form3":
                    return(
                        <Form3
                            
                            changeState={(dataform) => this.changeState(dataform)}
                            data={this.state.InputsData}
                            onChange2={this.onChange2}
                        />
                    );
                
                  break;
                
                default:

                    return(
                        " "
                    );

                  break;
            }
            
        }

        action_fetch(args){
    
            let url = args.dataform.url;
            const data = new FormData();
        
            data.append("funcion", args.dataform.funcion);
            

            for (const property in args.data) {

                data.append("data["+property+"]", args.data[property]);

            }   

            fetch(url, {
                method: "POST",
                body: data
            })
            .then(res => res.json())
            .then(
                (result) => args.dataform.resp(result),
                (error) => {
                    console.log(error);
                }
            )
        }

        render(){

            return(
                <Modal
                    title={this.props.title}
                    button1={this.props.button1}
                    BodyContent={() => this.ContentDispatcher()}
                    submit={() => this.action_fetch(this.state)}
                />
            );

        } 
    
    }


    /*ReactDOM.render(
        <ContentModal />,
        document.getElementById('carga_modal')
    );*/

</script>

{# Carga Opciones CRUD #}
<script type="text/babel">

    class Opciones extends React.Component {
                
        render() {
            return (
                <div className="buttons">
                    <ButtonCreate
                        level={0} 
                        text="Nuevo Gasto" 
                        title="Nuevo Gasto" 
                        button1="Crear Gasto"
                        url={
                            {put: "{{base_dir_controller}}data/agregar/gastos"}
                        }
                        funcion="crear_gasto"
                        fields={
                            {   
                                descripcion: "",
                                valor: "",
                                id_mes: "", 
                                fecha: ""
                            }
                        } 
                        formTemplate={(changeState, dataDefault) => {
                            return(
                                <FormGastos
                                    dataDefault={dataDefault}
                                    changeState={changeState}
                                />
                            );
                        }} 
                    />
                    <ButtonEdit
                        level={1}  
                        text="Editar Gasto"
                        title="Editar Gasto" 
                        button1="Guardar Cambios"
                        url={
                            {
                                put: "{{base_dir_controller}}data/agregar/gastos",
                                get: "{{base_dir_controller}}data/obtener/gastos"
                            
                            }
                        }
                        funcion={"obtener_gasto"}
                        fields={
                            {   
                                id: "",
                                descripcion: "",
                                valor: "",
                                id_mes: "", 
                                fecha: ""
                            }
                        }
                        formTemplate={(changeState, dataDefault) => {
                            return(
                                <FormGastos
                                    dataDefault={dataDefault}
                                    changeState={changeState}
                                />
                            );
                        }} 
                    />
                    <ButtonCreate
                        level={1} 
                        text="Procesar Gasto"
                        title="Procesar Gasto" 
                        button1="Procesar"
                        url={
                            {put: "{{base_dir_controller}}data/agregar/gastos"}
                        }
                        funcion="crear_gasto"
                        fields={
                            {   
                                id: "",
                                id_cuenta: "",
                                valor: "",
                                id_mes: "", 
                                fecha: ""
                            }
                        } 
                        formTemplate={(changeState, dataDefault) => {
                            return(
                                <FormProcesar
                                    dataDefault={dataDefault}
                                    changeState={changeState}
                                />
                            );
                        }}
                    />
                    <ButtonDelete
                        level={2}
                    />
                </div>
            );
        }
    }

    ReactDOM.render(
        <Opciones />,
        document.getElementById('butones')
    );


    class FormGastos extends Formdata{
        

        render(){
            
            return(
                 <form className="form-label-left input_mask" id="modal_form_cobrar">
                    <div className="col-md-6 col-sm-6 has-feedback">
                        <div className="form-group row">
                            <label className="col-form-label col-md-3 col-sm-3 ">Descripcion: </label>
                            <div className="col-md-9 col-sm-9 ">
                                <InputText
                                    name="descripcion"
                                    value={this.props.dataDefault.descripcion}
                                    placeholder="Ingrese descripcion" 
                                    onChange={this.onChange2}/>
                            </div>
                        </div>
                    </div>
                    <div className="col-md-6 col-sm-6 has-feedback">
                        <div className="form-group row">
                            <label className="col-form-label col-md-3 col-sm-3 ">Monto: </label>
                            <div className="col-md-9 col-sm-9 ">
                                <InputValue 
                                    name="valor"
                                    defaultValue={this.props.dataDefault.valor}
                                    placeholder="Monto"  
                                    onChange={this.onChange2}/>
                            </div>
                        </div>
                    </div>
                    <div className="col-md-6 col-sm-6 has-feedback">
                        <div className="form-group row">
                            <label className="col-form-label col-md-4 col-sm-4 ">Afiliar a Mes<span className="required">*</span>
                            </label>
                            <div className="col-md-8 col-sm-8 ">
                                <InputData
                                    data="meses"
                                    name="id_mes"
                                    defaultValue={this.props.dataDefault.id_mes}
                                    onChange={this.onChange2}/>
                            </div>
                        </div>
                    </div>
                    <div className="col-md-6 col-sm-6 has-feedback">
                        <div className="form-group row">
                            <label className="col-form-label col-md-4 col-sm-4 ">Fecha del Gasto<span className="required">*</span>
                            </label>
                            <div className="col-md-8 col-sm-8 ">
                                <InputFecha 
                                    name="fecha"
                                    defaultValue={this.props.dataDefault.fecha}
                                    onChange={this.onChange2}/>
                            </div>
                        </div>
                    </div>
                </form>
            );
        }
    }

    class FormProcesar extends Formdata{
        
        
        
        render(){

                return(
                    <form className="form-label-left input_mask" id="modal_form_cobrar">
                        <div className="col-md-6 col-sm-6 has-feedback">
                            <div className="form-group row">
                                <label className="col-form-label col-md-3 col-sm-3 ">Cuenta: </label>
                                <div className="col-md-9 col-sm-9 ">
                                    <InputData 
                                        data="cuentas" 
                                        name="id_cuenta"
                                        valueDefault={this.props.dataDefault.id_cuenta}
                                        onChange={this.onChange2}/>
                                </div>
                            </div>
                        </div>
                        <div className="col-md-6 col-sm-6 has-feedback">
                            <div className="form-group row">
                                <label className="col-form-label col-md-3 col-sm-3 ">Monto: </label>
                                <div className="col-md-9 col-sm-9 ">
                                    <InputText
                                        name="valor"
                                        placeholder="Ingrese datos"
                                        valueDefault={this.props.dataDefault.valor}
                                        onChange={this.onChange2}/>
                                </div>
                            </div>
                        </div>
                        <div className="col-md-6 col-sm-6 has-feedback">
                            <div className="form-group row">
                                <label className="col-form-label col-md-3 col-sm-3 ">Mes: </label>
                                <div className="col-md-9 col-sm-9 ">
                                    <InputData 
                                        data="meses"
                                        name="id_mes"
                                        valueDefault={this.props.dataDefault.id_mes}
                                        onChange={this.onChange2}/>
                                </div>
                            </div>
                        </div>
                        <div className="col-md-6 col-sm-6 has-feedback">
                            <div className="form-group row">
                                <label className="col-form-label col-md-4 col-sm-4 ">Fecha del Gasto<span className="required">*</span>
                                </label>
                                <div className="col-md-8 col-sm-8 ">
                                    <InputFecha 
                                        name="fecha"
                                        valueDefault={this.props.dataDefault.fecha}
                                        onChange={this.onChange2}/>
                                </div>
                            </div>
                        </div>
                    </form>
                );
        }
    }


</script>

{% endblock %}

{% block titlepage %}
		<h3>Gastos <small></small></h3>
{% endblock %}

{% block subtitlepage %}
            <h2 id="titleid">Lista de Gastos pendientes <small></small></h2>
{% endblock %}

{# botones de Edicion #}
{% block buttonpage %}
    <div class="x_content" id="butones">
 
        <div class="buttons">
            <button type="button" class="option_btn btn btn-primary btn-sm"  data-i="0" id="btn_nuevo_registro" onclick="Nuevo_registro(this)">Nuevo Gasto</button>
            <button type="button" class="option_btn btn btn-secondary btn-sm"  data-i="1" disabled id="btn_editar"   onclick="Obtener_registro(this)">Editar</button>
            <button type="button" class="option_btn btn btn-secondary btn-sm"  data-i="2" disabled id="btn_cobrar" onclick="cobrar()" >Procesar</button>
            <button type="button" class="option_btn btn btn-secondary btn-sm"  data-i="2" disabled id="btn_eliminar" onclick="Eliminar_msg(this)" >Eliminar</button>
            
        </div>
        
    </div>

    <div id="carga_modal"></div>
{% endblock %}

{# ventana modal #}

{% block modalcontent %}
	<div class="x_panel">
        
        <div class="x_content">
            <br>
            <form class="form-label-left input_mask" id="modal_form">
                <input type="hidden" id="form_id" name="id" value="1">
                <input type="hidden" id="form_id_cliente" name="id_cliente" value="1">
                
                
                <div class="col-md-6 col-sm-6 has-feedback">
                    <div class="form-group row">
                        <label class="col-form-label col-md-5 col-sm-5 ">Monto</label>
                        <div class="col-md-7 col-sm-7 ">
                            <input type="number" class="form-control"  name="monto" id="form_monto" placeholder="Ej. 50.000$">
                         </div>
                    </div>
                </div>

                 <div class="col-md-6 col-sm-6 has-feedback">
                    <div class="form-group row">
                        <label class="col-form-label col-md-4 col-sm-4 ">Fecha<span class="required">*</span>
                        </label>
                        <div class="col-md-8 col-sm-8 ">
                            <input class="date-picker form-control" placeholder="dd-mm-yyyy" type="text" required="required" name="fecha_cobro" id="form_fecha_cobro" onfocus="this.type='date'" onmouseover="this.type='date'" onclick="this.type='date'" onblur="this.type='text'" onmouseout="timeFunctionLong(this)">
                            <script>
                                function timeFunctionLong(input) {
                                    setTimeout(function() {
                                        input.type = 'text';
                                    }, 60000);
                                }
                            </script>
                        </div>
                    </div>
                </div>

                <label for="message">Descripción (64 caracteres max) :</label>
                <textarea id="form_descripcion" required="required" class="form-control" name="descripcion" data-parsley-trigger="keyup" data-parsley-minlength="0" data-parsley-maxlength="64" data-parsley-minlength-message="Come on! You need to enter at least a 20 caracters long comment.." data-parsley-validation-threshold="10"></textarea>

               

            </form>
        </div>
    </div>
{% endblock %}

{# fin ventana modal #}


{# tabla #}

{% block headtable %}
    <tr>
        <th><input type="checkbox" id="check-all"></th>
        <th>Descripcion</th>
        <th>Monto</th>
        <th>Fecha</th>
    </tr>

{% endblock %}

{% block bodytable %}
    <tr class="id_{{dato.id}}">
        <td><input type="checkbox" name="check-all" onclick="this.checked = !this.checked" value="{{dato.id}}"></td>
        <td>{{dato.descripcion|upper}} </td>
        <td>{{dato.valor}}</td>
        <td>{{dato.fecha}}</td>

    </tr>

{% endblock %}

{# fin tabla #}

{% block js %}
    {% block js_conf %}

        var index_tb = {
                        "data": [
                            ["id"],
                            ["descripcion"],
                            ["valor"], 
                            [ "fecha"]
                        ],
                        "upper": [1,2] 
                    };


        ruta_crud = "gastos";


    {% endblock %}
    {{ parent() }}
    
    <script>

    
    // llama Modals
    Obtener_registro = function(e){

        var url = "{{base_dir_controller}}"+rutas.obtener;
        
        var data = {funcion: "", data: ""};
			data.data = CeldasCheck();
			data.funcion = rutas.funcion.getdata;

        if(data.data.id.length == 1){

            $.post(url, data).done(function(resp){

                resp = JSON.parse(resp);

                resp.forEach(function(value){

                    cargar_form(value);
                    
                });
                

                new template_modal({
                    title: "Modificar Datos del Pago",
                    btn_rigth_function: "Modificar_registro_msg()",
                    btn_rigth_text: "Guardar Cambios"
                });
                
                
            });

        }

    } 

    Nuevo_registro = function(e){

        new template_modal({
            title: "Nuevo Registro de Pago",
            btn_rigth_function: "Agregar_registro()",
            reset_form: "modal_form",
            btn_rigth_text: "Crear Registro"
        });

    }

    Eliminar_msg = function(e){

        new template_modal_advert({
            title: "¿Esta Seguro que desea Eliminar?",
            btn_rigth_function: "Eliminar_registro()",
            btn_rigth_text: "Si, Eliminar"
        });
        
    }

    cobrar = function(e = false){

        if(e){

            var url = "{{base_dir_controller}}pagos/agregar";
            document.getElementById("modal-btn-cobrar").disabled = true;

            var temp = $( "#modal_form_cobrar" ).serializeArray()
                    .reduce(function(a, z) { a[z.name] = z.value; return a; }, {});

            var dataform = {funcion: "", data: ""};
            dataform.funcion = 'cobrar_pago';
            dataform.data = temp;
            dataform.data.pagos = CeldasCheck(); 

            $.post(url, dataform).done(function(resp){

                resp = JSON.parse(resp);

                document.getElementById("modal-btn-cobrar").disabled = false;

                if(!validar(resp)){
                    
                    return 0;

                }

                resp[0].forEach(function(value){

                    table.row($('#tb_principal tbody .id_'+value.id)).remove().draw();
                    
                });

                $(".bs-example-modal-cobrar").modal("hide");
				status_options();

                new PNotify({
                            title: 'Registrado',
                            text: 'Los pagos han sido registrados correctamente',
                            type: 'success',
                            styling: 'bootstrap3'
                        });
                
            });

        }else{

            $(".bs-example-modal-cobrar").modal();

        }
        
    }

    </script>
{% endblock %}
