{% extends "index.twig" %}

{% block content %}
<div class="">
    <div class="page-title">
      <div class="title_left">
        {% block titlepage %}
		<h3>Pagos <small></small></h3>
		{% endblock %}
      </div>
    </div>

    <div class="clearfix"></div>

    <div class="row">
        <div class="col-md-12 col-sm-12 ">
			<div class="x_panel">
				<div class="x_title">
					{% block subtitlepage %}
						<h2>Lista de Clientes <small>Pendientes</small></h2>
					{% endblock %}
				
				
					<!--<ul class="nav navbar-right panel_toolbox">
					<li><a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
					</li>
					<li class="dropdown">
						<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><i class="fa fa-wrench"></i></a>
						<div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
							<a class="dropdown-item" href="#">Settings 1</a>
							<a class="dropdown-item" href="#">Settings 2</a>
						</div>
					</li>
					<li><a class="close-link"><i class="fa fa-close"></i></a>
					</li>
					</ul>-->
				
					<div class="clearfix"></div>
				</div>
				<div class="x_content">
					<div class="row">
						<div class="col-sm-12">
							<div class="card-box table-responsive">
								<!--<p class="text-muted font-13 m-b-30">
								DataTables has most features enabled by default, so all you need to do to use it with your own tables is to call the construction function: <code>$().DataTable();</code>
								</p>-->
								{% block buttonpage %}
								
								{% endblock %}
							
								
								<table id="tb_principal" class="table table-striped table-bordered" style="width:100%">
									<thead>
									{% block headtable %}
										<tr>
										<th>ID</th>
										<th>Mac</th>
										<th>Nombre</th>
										</tr>
									{% endblock %}
									</thead>


									<tbody>

										{% for dato in data %}

										{% block bodytable %}
											<tr>
											<td>{{dato.id}}</td>
											<td>{{dato.mac}}</td>
											<td>{{dato.comentario}}</td>
											</tr>
										{% endblock %}
										
										{% endfor %}
								
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</div>
			</div>
        </div>
	</div>
</div>
{% endblock %}



{% block js %}

{% block data_var %}
<script type="text/javascript">
	
	var columnDefs = {
                "targets": [ 0 ],
                "searchable": false,
				"sorting": false
            };

</script>
{% endblock %}

<script type="text/javascript">
	
	//traducion de datatable
	var spanis ={
				    "processing": "Procesando...",
				    "lengthMenu": "Mostrar _MENU_ registros",
				    "zeroRecords": "No se encontraron resultados",
				    "emptyTable": "Ningún dato disponible en esta tabla",
				    "infoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
				    "infoFiltered": "(filtrado de un total de _MAX_ registros)",
				    "search": "Buscar:",
				    "infoThousands": ",",
				    "loadingRecords": "Cargando...",
				    "paginate": {
				        "first": "Primero",
				        "last": "Último",
				        "next": "Siguiente",
				        "previous": "Anterior"
				    },
				    "aria": {
				        "sortAscending": ": Activar para ordenar la columna de manera ascendente",
				        "sortDescending": ": Activar para ordenar la columna de manera descendente"
				    },
				    "buttons": {
				        "copy": "Copiar",
				        "colvis": "Visibilidad",
				        "collection": "Colección",
				        "colvisRestore": "Restaurar visibilidad",
				        "copyKeys": "Presione ctrl o u2318 + C para copiar los datos de la tabla al portapapeles del sistema. <br \/> <br \/> Para cancelar, haga clic en este mensaje o presione escape.",
				        "copySuccess": {
				            "1": "Copiada 1 fila al portapapeles",
				            "_": "Copiadas %d fila al portapapeles"
				        },
				        "copyTitle": "Copiar al portapapeles",
				        "csv": "CSV",
				        "excel": "Excel",
				        "pageLength": {
				            "-1": "Mostrar todas las filas",
				            "1": "Mostrar 1 fila",
				            "_": "Mostrar %d filas"
				        },
				        "pdf": "PDF",
				        "print": "Imprimir"
				    },
				    "autoFill": {
				        "cancel": "Cancelar",
				        "fill": "Rellene todas las celdas con <i>%d<\/i>",
				        "fillHorizontal": "Rellenar celdas horizontalmente",
				        "fillVertical": "Rellenar celdas verticalmentemente"
				    },
				    "decimal": ",",
				    "searchBuilder": {
				        "add": "Añadir condición",
				        "button": {
				            "0": "Constructor de búsqueda",
				            "_": "Constructor de búsqueda (%d)"
				        },
				        "clearAll": "Borrar todo",
				        "condition": "Condición",
				        "conditions": {
				            "date": {
				                "after": "Despues",
				                "before": "Antes",
				                "between": "Entre",
				                "empty": "Vacío",
				                "equals": "Igual a",
				                "notBetween": "No entre",
				                "notEmpty": "No Vacio",
				                "not": "Diferente de"
				            },
				            "number": {
				                "between": "Entre",
				                "empty": "Vacio",
				                "equals": "Igual a",
				                "gt": "Mayor a",
				                "gte": "Mayor o igual a",
				                "lt": "Menor que",
				                "lte": "Menor o igual que",
				                "notBetween": "No entre",
				                "notEmpty": "No vacío",
				                "not": "Diferente de"
				            },
				            "string": {
				                "contains": "Contiene",
				                "empty": "Vacío",
				                "endsWith": "Termina en",
				                "equals": "Igual a",
				                "notEmpty": "No Vacio",
				                "startsWith": "Empieza con",
				                "not": "Diferente de"
				            },
				            "array": {
				                "not": "Diferente de",
				                "equals": "Igual",
				                "empty": "Vacío",
				                "contains": "Contiene",
				                "notEmpty": "No Vacío",
				                "without": "Sin"
				            }
				        },
				        "data": "Data",
				        "deleteTitle": "Eliminar regla de filtrado",
				        "leftTitle": "Criterios anulados",
				        "logicAnd": "Y",
				        "logicOr": "O",
				        "rightTitle": "Criterios de sangría",
				        "title": {
				            "0": "Constructor de búsqueda",
				            "_": "Constructor de búsqueda (%d)"
				        },
				        "value": "Valor"
				    },
				    "searchPanes": {
				        "clearMessage": "Borrar todo",
				        "collapse": {
				            "0": "Paneles de búsqueda",
				            "_": "Paneles de búsqueda (%d)"
				        },
				        "count": "{total}",
				        "countFiltered": "{shown} ({total})",
				        "emptyPanes": "Sin paneles de búsqueda",
				        "loadMessage": "Cargando paneles de búsqueda",
				        "title": "Filtros Activos - %d"
				    },
				    "select": {
				        "1": "%d fila seleccionada",
				        "_": "%d filas seleccionadas",
				        "cells": {
				            "1": "1 celda seleccionada",
				            "_": "$d celdas seleccionadas"
				        },
				        "columns": {
				            "1": "1 columna seleccionada",
				            "_": "%d columnas seleccionadas"
				        }
				    },
				    "thousands": ".",
				    "datetime": {
				        "previous": "Anterior",
				        "next": "Proximo",
				        "hours": "Horas",
				        "minutes": "Minutos",
				        "seconds": "Segundos",
				        "unknown": "-",
				        "amPm": [
				            "am",
				            "pm"
				        ]
				    },
				    "editor": {
				        "close": "Cerrar",
				        "create": {
				            "button": "Nuevo",
				            "title": "Crear Nuevo Registro",
				            "submit": "Crear"
				        },
				        "edit": {
				            "button": "Editar",
				            "title": "Editar Registro",
				            "submit": "Actualizar"
				        },
				        "remove": {
				            "button": "Eliminar",
				            "title": "Eliminar Registro",
				            "submit": "Eliminar",
				            "confirm": {
				                "_": "¿Está seguro que desea eliminar %d filas?",
				                "1": "¿Está seguro que desea eliminar 1 fila?"
				            }
				        },
				        "error": {
				            "system": "Ha ocurrido un error en el sistema (<a target=\"\\\" rel=\"\\ nofollow\" href=\"\\\">Más información&lt;\\\/a&gt;).<\/a>"
				        },
				        "multi": {
				            "title": "Múltiples Valores",
				            "info": "Los elementos seleccionados contienen diferentes valores para este registro. Para editar y establecer todos los elementos de este registro con el mismo valor, hacer click o tap aquí, de lo contrario conservarán sus valores individuales.",
				            "restore": "Deshacer Cambios",
				            "noMulti": "Este registro puede ser editado individualmente, pero no como parte de un grupo."
				        }
				    },
				    "info": "Mostrando de _START_ a _END_ de _TOTAL_ entradas"
	};


	// carga funciones 
	$(document).ready(function() {


		//Inicializacion de la tabla
	    table = $('#tb_principal').DataTable( {
	        "scrollY":        "450px",
	        "scrollCollapse": true,
	        "paging":         false,
	        "language": spanis,
			"order": [[ 1, "asc" ]],
			"columnDefs": [{
                searchable: false,
				sorting: false,
				targets: 0,
            }],

	    } );
		
		//N Celdas seleccionadas
	 	checkcount = 0;

		//Selecionar celdas individualmente
		$('#tb_principal tbody').on('click', 'tr', function () {
			var data = table.row( this ).data();

			columna = this;

			columna.children[0].children[0].checked = !columna.children[0].children[0].checked;
			columna.children[0].children[0].checked ? checkcount++ : checkcount--;
			
			status_options();

		} );

		//Selecionar Todas Las Celdas
		document.getElementById("check-all").addEventListener("click", function(){
			var checked = this.checked;
			checked ? checkcount=document.getElementsByName("check-all").length : checkcount=0;

			document.getElementsByName("check-all").forEach(function(e){				
				e.checked = checked;
			});

			status_options();
			
		});

		//Refrecar Estado de las opciones
		function status_options(){
			//console.log("hola");

			cell = CeldasCheck();
			checkcount = cell.id.length;

			if(checkcount > 0 && checkcount < 2){
				document.getElementById("btn_editar").disabled = false;
				document.getElementById("btn_editar").className = "btn btn-primary btn-sm"
				document.getElementById("btn_eliminar").disabled = false;
				document.getElementById("btn_eliminar").className = "btn btn-primary btn-sm"
				document.getElementById("btn_nuevo_registro").disabled = true;
				document.getElementById("btn_nuevo_registro").className = "btn btn-secondary btn-sm"
			}else if(checkcount > 1){
				document.getElementById("btn_editar").disabled = true;
				document.getElementById("btn_editar").className = "btn btn-secondary btn-sm"
				document.getElementById("btn_eliminar").disabled = false;
				document.getElementById("btn_eliminar").className = "btn btn-primary btn-sm"
				document.getElementById("btn_nuevo_registro").disabled = true;
				document.getElementById("btn_nuevo_registro").className = "btn btn-secondary btn-sm"
			}else{
				document.getElementById("btn_editar").disabled = true;
				document.getElementById("btn_editar").className = "btn btn-secondary btn-sm"
				document.getElementById("btn_eliminar").disabled = true;
				document.getElementById("btn_eliminar").className = "btn btn-secondary btn-sm"
				document.getElementById("btn_nuevo_registro").disabled = false;
				document.getElementById("btn_nuevo_registro").className = "btn btn-primary btn-sm"
			}
			 
		}


		//Obtener Celdas Selecionadas
		CeldasCheck = function(){
			var check_all = document.getElementsByName("check-all");
			var data = {id: []};
			var index = 0;

			check_all.forEach(function(check){

				if(check.checked){
					data.id[index] = check.value;
					index++;
				}  
			
			});
			
			return data;
		}
		
		
		// llama Modals
		Obtener_registro = function(e){

			var url = "{{base_dir_controller}}{% block rutaobtener "" %}";
			var data = CeldasCheck();
			

			if(data.id.length == 1){

				$.post(url, data).done(function(resp){

					resp = JSON.parse(resp);

					resp.forEach(function(value){

						cargar_form(value);
						
					});
					

					new template_modal({
						title: "Modificar Datos del Cliente",
						btn_rigth_function: "Modificar_registro_msg()",
						btn_rigth_text: "Guardar Cambios"
					});
					
					
				});

			}

		}

		Nuevo_registro = function(e){

			new template_modal({
				title: "Agregar Nuevo Cliente",
				btn_rigth_function: "Agregar_registro()",
				reset_form: "modal_form",
				btn_rigth_text: "Crear Registro"
			});
	
		}

		Eliminar_msg = function(e){

			new template_modal_advert({
				title: "¿Esta Seguro que desea Eliminar?",
				btn_rigth_function: "Eliminar_registro()",
				btn_rigth_text: "Si, Eliminar"
			});
			
		}

		//
		Eliminar_registro = function(e){
			var url = "{{base_dir_controller}}{% block rutaeliminar "" %}";
			
			var data = CeldasCheck();
			
			$.post(url, data).done(function(resp){

				resp = JSON.parse(resp);

				resp.id.forEach(function(value){
					table.row($('#tb_principal tbody .id_'+value)).remove().draw();
				});

				$(".bs-example-modal-md").modal("hide");
				status_options();

				new PNotify({
							title: 'Eliminado',
							text: 'Los registros han sido eliminados correctamente',
							type: 'success',
							styling: 'bootstrap3'
						});
				
			});
			

		}

		Modificar_registro_msg = function(e){

			document.getElementById("modal-btn-save").disabled = true;

			new template_modal_advert({
				title: "¿Esta Seguro que desea Modificar?",
				btn_rigth_function: "Modificar_registro()",
				btn_rigth_text: "Si, Modificar"
			});
			
		}

		Modificar_registro = function(e){

			var url = "{{base_dir_controller}}{% block rutaeditar "" %}";
			$(".bs-example-modal-md").modal("hide");


			$.post(url, $( "#modal_form" ).serialize()).done(function(data){
				
				data = JSON.parse(data);
				fila = [];
				
				if(typeof(data) == "object"){

					fila = addRow(data, index_tb);
					fila[0][0] = '<input type="checkbox" name="check-all" onclick="this.checked = !this.checked" value="'+data[0].id+'">';
					
					table.row($('#tb_principal tbody .id_'+data[0].id )).remove().draw();
					table.row.add(fila[0]).draw().nodes().to$().addClass( 'id_'+data[0].id );;

					new PNotify({
							title: 'Registro Modificado',
							text: 'Los registros han sido Modificados correctamente',
							type: 'success',
							styling: 'bootstrap3'
						});

					$(".bs-example-modal-lg").modal("hide");
					
				}else{
					new PNotify({
							title: 'Ocurrio un error',
							text: 'Los registros No han sido modificados correctamente',
							type: 'error',
							styling: 'bootstrap3'
						});
				
				}
				
				
				document.getElementById("modal-btn-save").disabled = false;
				status_options();

			});

			
			
			
		}


		Agregar_registro = function(e){

			var url = "{{base_dir_controller}}{% block rutaagregar "" %}";
			document.getElementById("modal-btn-save").disabled = true;

			$.post(url, $( "#modal_form" ).serialize()).done(function(data){
				
				data = JSON.parse(data);
				fila = [];
				if(typeof(data) == "object"){
					
					fila = addRow(data, index_tb);
					fila[0][0] = '<input type="checkbox" name="check-all" onclick="this.checked = !this.checked" value="'+data[0].id+'">'
					

					table.row.add(fila[0]).draw().nodes().to$().addClass( 'id_'+data[0].id );;

					new PNotify({
							title: 'Registro Creado',
							text: 'Los registros han sido creados correctamente',
							type: 'success',
							styling: 'bootstrap3'
						});

					$(".bs-example-modal-lg").modal("hide");

					
					
				}else{
					new PNotify({
							title: 'Ocurrio un error',
							text: 'Los registros No han sido creados correctamente',
							type: 'error',
							styling: 'bootstrap3'
						});

				}

				status_options();
				
				
				
				

			});
		} 


	});

 	//Cargar datos al Form 
	function cargar_form(data){
			
			keys = Object.keys(data);
			
			keys.forEach(function(key){

			temp = "form_"+key;

			try{
				document.getElementById(temp).value = data[key];
			}catch{
				console.log("No se cargaron algunso campos porque no existe el id");
			}
			

			});
	}
	function addRow(data, index_columns){
    
			data_row = [];
		
			data.forEach(function(registro, index){
				
				data_row[index] = [];

				index_columns.data.forEach(function(value, index2){

					data_row[index][index2] = "";
					value.forEach(function(key, index3){
						data_row[index][index2] += (value.length == index3+1) ? registro[key] : registro[key]+" ";
					});

				});

				index_columns.upper.forEach(function(key){
					data_row[index][key] = data_row[index][key].toUpperCase();
				});
			});
			

			

			return data_row;
	}

	class template_modal {


		constructor(datos) {
			
			if(typeof(datos) == "object"){

				this.title = datos.title == undefined ? "Sin Titulo" : datos.title;
				this.btn_rigth_function = datos.btn_rigth_function == undefined ? "alert('Sin funcion')" : datos.btn_rigth_function;
				this.reset_form = datos.reset_form == undefined ? false : datos.reset_form;
				this.btn_rigth_text = datos.btn_rigth_text == undefined ? "OK" : datos.btn_rigth_text;
				

				document.getElementById("modal-btn-save").dataset.event_function = this.btn_rigth_function;
				document.getElementById("modal-btn-save").textContent = this.btn_rigth_text;
				document.getElementById("Modaltitle").textContent = this.title;
				document.getElementById("modal-btn-save").disabled = false;

				if(this.reset_form){
					document.getElementById(this.reset_form).reset();
				}
				
				$(".bs-example-modal-lg").modal();

			}else{
				alert("error al definir modal")
			}
			
		
		}
	}

	class template_modal_advert {


		constructor(datos) {
			
			if(typeof(datos) == "object"){

				this.title = datos.title == undefined ? "Sin Titulo" : datos.title;
				this.btn_rigth_function = datos.btn_rigth_function == undefined ? "alert('Sin funcion')" : datos.btn_rigth_function;
				this.reset_form = datos.reset_form == undefined ? false : datos.reset_form;
				this.btn_rigth_text = datos.btn_rigth_text == undefined ? "OK" : datos.btn_rigth_text;

				document.getElementById("advertmodal-btn-yes").dataset.event_function = this.btn_rigth_function;
				document.getElementById("Modaltitleadvert").textContent = this.title;
				document.getElementById("advertmodal-btn-yes").textContent = this.btn_rigth_text;

				if(this.reset_form){
					document.getElementById(this.reset_form).reset();
				}
				
				$(".bs-example-modal-md").modal();

			}else{
				alert("error al definir modal")
			}
			
		
		}
	}

</script>
{% endblock %}




    